const https = require('https');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤
function escapeHtml(text) {
  if (!text || typeof text !== 'string') {
    return '';
  }
  
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  
  return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ API –≤—ã–∑–æ–≤–æ–≤
async function retryApiCall(apiCall, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiCall();
    } catch (error) {
      if (attempt === maxRetries) {
        throw error;
      }
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries}`);
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function loadCategoryData(slug) {
  return new Promise((resolve, reject) => {
    const url = `https://admin.burspb.com/data/v1/category/slug/${slug}`;
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response);
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', reject);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–±–æ—Ä–∫–∏
function createSelectionPage(selectionData, slug, distDir, title) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π title –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ slug
  const selectionTitle = title || slug.replace(/-/g, ' ').replace(/^\w/, c => c.toUpperCase());
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
  const fullTitle = `${selectionTitle}. –ö—É–ø–∏—Ç—å ${selectionTitle.toLowerCase()} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ì–ö –ë—É—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Äî –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—É—Ä–µ–Ω–∏—è ‚Ññ1 –≤ –†–æ—Å—Å–∏–∏`;
  const fullDescription = `–ö—É–ø–∏—Ç—å ${selectionTitle.toLowerCase()} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ì–ö –ë—É—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏! üî•–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä ${selectionTitle.toLowerCase()}! ‚úÖ–ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è!üöö –î–æ—Å—Ç–∞–≤–∫–∞! üéÅ–í—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!`;

  const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${escapeHtml(fullTitle)}</title>
  <meta name="description" content="${escapeHtml(fullDescription)}">
  <meta property="og:title" content="${escapeHtml(fullTitle)}">
  <meta property="og:description" content="${escapeHtml(fullDescription)}">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://burspb.com/catalog/selection-${slug}">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="${escapeHtml(fullTitle)}">
  <meta name="twitter:description" content="${escapeHtml(fullDescription)}">
  <link rel="canonical" href="https://burspb.com/catalog/selection-${slug}">
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": "${escapeHtml(selectionTitle)}",
    "description": "${escapeHtml(fullDescription)}",
    "url": "https://burspb.com/catalog/selection-${slug}",
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": ${selectionData.posts ? selectionData.posts.length : 0}
    }
  }
  </script>
</head>
<body>
  <div id="app"></div>
  <script type="module" src="/src/main.ts"></script>
</body>
</html>`;

  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ dist/ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
  const fileName = `selection-${slug}.html`;
  const filePath = path.join(distDir, fileName);
  
  try {
    fs.writeFileSync(filePath, htmlContent, 'utf8');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName} - "${selectionTitle}" (${selectionData.posts ? selectionData.posts.length : 0} —Ç–æ–≤–∞—Ä–æ–≤)`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ ${slug}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–±–æ—Ä–æ–∫
async function loadSelections() {
  const selections = [];
  
  console.log(`üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–¥–±–æ—Ä–æ–∫ –≤ API —á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...`);
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
  const categoriesToCheck = [
    'pnevmoudarnik',
    'burovye-dolota', 
    'koronki-tverdosplavnye',
    'skvazhinnye-nasosy',
    'obsadnye-truby',
    'skvazhinnye-ogolovki'
  ];
  
  console.log(`üìÇ –ü—Ä–æ–≤–µ—Ä—è—é ${categoriesToCheck.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–±–æ—Ä–æ–∫...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ nested_categories (–ø–æ–¥–±–æ—Ä–æ–∫)
  for (const categorySlug of categoriesToCheck) {
    try {
      console.log(`üìÇ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categorySlug}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å nested_categories
      const categoryData = await retryApiCall(() => loadCategoryData(categorySlug));
      
      if (categoryData && categoryData.nested_categories && categoryData.nested_categories.length > 0) {
        console.log(`   –ù–∞–π–¥–µ–Ω–æ ${categoryData.nested_categories.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é nested_category - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–æ–π
        for (const nested of categoryData.nested_categories) {
          if (nested.slug && nested.title) {
            try {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ nested_category
              const selectionData = await retryApiCall(() => loadCategoryData(nested.slug));
              
              if (selectionData) {
                // –ü–æ–¥–±–æ—Ä–∫–∞: –ù–ï–¢ –æ–±—ä–µ–∫—Ç–∞ category, –Ω–æ –ï–°–¢–¨ —Ç–æ–≤–∞—Ä—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
                const hasCategory = selectionData.category;
                const hasPosts = selectionData.posts && selectionData.posts.length > 0;
                
                console.log(`     üîç ${nested.title}: category=${hasCategory ? '–µ—Å—Ç—å' : '–ù–ï–¢'}, posts=${selectionData.posts ? selectionData.posts.length : 0}`);
                
                if (!hasCategory && hasPosts) {
                  console.log(`     ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞: ${nested.title} (${selectionData.posts.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
                  selections.push({
                    slug: nested.slug,
                    title: nested.title,
                    parentCategory: categorySlug,
                    parentTitle: categoryData.title || categorySlug,
                    itemCount: selectionData.posts.length,
                    data: selectionData
                  });
                }
              }
            } catch (error) {
              console.log(`     ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${nested.slug}: ${error.message}`);
            }
          }
        }
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categorySlug}: ${error.message}`);
    }
  }
  
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${selections.length} –ø–æ–¥–±–æ—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
  return selections;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–æ–∫...');
  
  const distDir = path.join(process.cwd(), 'dist');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–±–æ—Ä–∫–∏
  const selections = await loadSelections();
  
  if (selections.length === 0) {
    console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–¥–±–æ—Ä–∫–∏. –ü–æ–¥–±–æ—Ä–∫–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã.');
    return;
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ${selections.length} –ø–æ–¥–±–æ—Ä–æ–∫...`);
  let createdSelections = 0;
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–±–æ—Ä–æ–∫
  for (const selection of selections) {
    try {
      console.log(`üì¶ –°–æ–∑–¥–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–±–æ—Ä–∫–∏: ${selection.title} (${selection.itemCount} —Ç–æ–≤–∞—Ä–æ–≤)`);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const created = createSelectionPage(selection.data, selection.slug, distDir, selection.title);
      if (created) {
        createdSelections++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏ ${selection.slug}:`, error.message);
    }
  }
  
  console.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${createdSelections} –ø–æ–¥–±–æ—Ä–æ–∫ –∏–∑ ${selections.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
}

main().catch(console.error); 