const https = require('https');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤
function escapeHtml(text) {
  if (!text || typeof text !== 'string') {
    return '';
  }
  
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  
  return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function loadCategoryData(slug) {
  return new Promise((resolve, reject) => {
    const url = `https://admin.burspb.com/data/v1/category/slug/${slug}`;
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response);
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', reject);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Ñ–∞–π–ª–∞ –ø–æ–¥–±–æ—Ä–∫–∏
function createSelectionHTML(title, slug, description, itemCount = 0) {
  const fullTitle = `${title}. –ö—É–ø–∏—Ç—å ${title.toLowerCase()} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ì–ö –ë—É—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Äî –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—É—Ä–µ–Ω–∏—è ‚Ññ1 –≤ –†–æ—Å—Å–∏–∏`;
  const fullDescription = description || `–ö—É–ø–∏—Ç—å ${title.toLowerCase()} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ì–ö –ë—É—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏! üî•–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä ${title.toLowerCase()}! ‚úÖ–ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è!üöö –î–æ—Å—Ç–∞–≤–∫–∞! üéÅ–í—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!`;

  return `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${escapeHtml(fullTitle)}</title>
  <meta name="description" content="${escapeHtml(fullDescription)}">
  <meta property="og:title" content="${escapeHtml(fullTitle)}">
  <meta property="og:description" content="${escapeHtml(fullDescription)}">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://burspb.com/catalog/selection-${slug}">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="${escapeHtml(fullTitle)}">
  <meta name="twitter:description" content="${escapeHtml(fullDescription)}">
  <link rel="canonical" href="https://burspb.com/catalog/selection-${slug}">
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": "${escapeHtml(title)}",
    "description": "${escapeHtml(fullDescription)}",
    "url": "https://burspb.com/catalog/selection-${slug}",
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": ${itemCount}
    }
  }
  </script>
</head>
<body>
  <div id="app"></div>
  <script type="module" src="/src/main.ts"></script>
</body>
</html>`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–¥–±–æ—Ä–æ–∫ –≤ API...');
  
  // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏
  const categoriesToCheck = [
    'pnevmoudarnik',
    'burovye-dolota', 
    'koronki-tverdosplavnye',
    'skvazhinnye-nasosy',
    'obsadnye-truby',
    'skvazhinnye-ogolovki'
  ];
  
  const foundSelections = [];
  
  // –ò—â–µ–º –ø–æ–¥–±–æ—Ä–∫–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  for (const categorySlug of categoriesToCheck) {
    try {
      console.log(`üìÇ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categorySlug}`);
      const categoryData = await loadCategoryData(categorySlug);
      
      if (categoryData && categoryData.nested_categories) {
        console.log(`   –ù–∞–π–¥–µ–Ω–æ ${categoryData.nested_categories.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫`);
        
        for (const nested of categoryData.nested_categories) {
          if (nested.slug && nested.title) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥–±–æ—Ä–∫–æ–π
            try {
              const selectionData = await loadCategoryData(nested.slug);
              
              if (selectionData && !selectionData.category && selectionData.posts && selectionData.posts.length > 0) {
                console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞: ${nested.title} (${selectionData.posts.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
                foundSelections.push({
                  title: nested.title,
                  slug: nested.slug,
                  itemCount: selectionData.posts.length,
                  parentCategory: categorySlug
                });
              }
            } catch (error) {
              console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${nested.slug}: ${error.message}`);
            }
          }
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categorySlug}: ${error.message}`);
    }
  }
  
  console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ ${foundSelections.length} –ø–æ–¥–±–æ—Ä–æ–∫. –°–æ–∑–¥–∞—é HTML —Ñ–∞–π–ª—ã...`);
  
  let createdCount = 0;
  const distDir = path.join(process.cwd(), 'dist');
  
  for (const selection of foundSelections) {
    try {
      const htmlContent = createSelectionHTML(selection.title, selection.slug, null, selection.itemCount);
      const fileName = `selection-${selection.slug}.html`;
      const filePath = path.join(distDir, fileName);
      
      fs.writeFileSync(filePath, htmlContent, 'utf8');
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName} - "${selection.title}" (${selection.itemCount} —Ç–æ–≤–∞—Ä–æ–≤)`);
      createdCount++;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è ${selection.slug}: ${error.message}`);
    }
  }
  
  console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ ${createdCount} HTML —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–±–æ—Ä–æ–∫ –∏–∑ ${foundSelections.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö.`);
}

main().catch(console.error); 